package view.table;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.TextArea;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;

public class CustomCellRenderer extends DefaultTableCellRenderer {

	public static final Color HEADER_COLOR = new Color(189, 212, 217);
	public static final Color SELECTION_COLOR = new Color(168, 237, 183);
	public static final Color LIGHT_BACKGROUND = new Color(245, 250, 250);
	public static final Color DARKER_BACKGROUND = new Color(213, 222, 221);
	
	@Override
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
			int row, int column) {
		
		Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

		if (component instanceof JLabel) {
			JLabel label = (JLabel) component;
			
			Font font = label.getFont();
			
			label.setBorder(new EmptyBorder(5, 5, 5, 5));// padding

			if (row % 2 == 0) {
				label.setBackground(DARKER_BACKGROUND);
			} else {
				label.setBackground(LIGHT_BACKGROUND);
			}
			
			if (isSelected) {
				label.setForeground(Color.BLACK);
				label.setBackground(SELECTION_COLOR);
				label.setFont(new Font(font.getFontName(), Font.BOLD, font.getSize()));
			}
			
			if(column == 0) {
				label.setBackground(HEADER_COLOR);
			}
			
			
			if (isNumeric(value.toString())) {
				label.setHorizontalAlignment(JLabel.CENTER);
			} else {
				label.setHorizontalAlignment(JLabel.LEFT);
			}
		}
		return component;
	}
	
	private static boolean isNumeric(String strNum) {
	    if (strNum == null) {
	        return false;
	    }
	    try {
	        double d = Double.parseDouble(strNum);
	    } catch (NumberFormatException nfe) {
	        return false;
	    }
	    return true;
	}
}
