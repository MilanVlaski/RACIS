package view.input;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import controller.state.EditorState;
import model.ApplicationModel;
import model.Publisher;
import model.table.GeneralTableModel;
import model.tree.TreeElement.Column;
import view.Colors;
import view.Subscriber;
/**
 * Kontejner za Input polja.
 * @author Milan Vlaski
 *
 */
public class InputPanel extends JPanel implements Subscriber{
	
	public enum SubmitAction {
		CREATE,
		UPDATE;
	}
	
	private List<Input> inputs = new ArrayList<>();
	
	private GeneralTableModel tableModel;
	private final JPanel containerPanel = new JPanel(new GridBagLayout());
	private EditorState editorState;

	public InputPanel(GeneralTableModel tableModel) {
		this.tableModel = tableModel;
		setLayout(new FlowLayout(FlowLayout.LEFT));
		setBackground(Colors.DARK_BACKGROUND);
		containerPanel.setBackground(Colors.DARK_BACKGROUND);
		setPreferredSize(new Dimension(0, 500));
		
		JPanel buttonPanel = new JPanel();
		JButton okBtn = new JButton("Prihvati");
		okBtn.addActionListener((e) -> editorState.handleSubmit());
		
	    JButton cancelBtn = new JButton("Odustani");
	    cancelBtn.addActionListener((e) -> editorState.handleCancel());
	    
	    buttonPanel.add(okBtn);
	    buttonPanel.add(cancelBtn);
	    
	    GridBagConstraints gbc = new GridBagConstraints();
	    gbc.gridx = 0;
	    gbc.gridy = 0;
	    containerPanel.add(buttonPanel, gbc);
	    
	    add(containerPanel);
		
		setVisible(false);
	}


	public void setInputs(List<Column> columns) {
		
		for (Input input : inputs) {
			containerPanel.remove((Component) input);
		}
		inputs.clear();
		
		for (Column column : columns) {
			Input input = InputFactory.createInput(column);
			inputs.add(input);
		}
		
		addWithLayout();
	}
	
	private void addWithLayout() {
		GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        int row = 1;
        int col = 0;
		
		for (Input input: inputs) {
			gbc.gridx = col;
			gbc.gridy = row;
			gbc.anchor = GridBagConstraints.LINE_START;

			containerPanel.add((Component) input, gbc);
			
	        row++;
	        if (row >= 5) {
	            row = 0;
	            col++;
	        }
		}
		
		containerPanel.revalidate();
		containerPanel.repaint();
	}
	
	/**
	 * Gets all the values that are in the input fields,
	 * and fetches keys, in case of a LinkedField.
	 */
	public HashMap<String, Object> getValues() {
		HashMap<String, Object> result = new HashMap<>();
		for (Input input : inputs) {
			
			Object value = null;
			if(input instanceof LinkedField) {
				value = ((LinkedField)input).getKeyForValue();
			} else {
				value = input.getValue();
			}
			result.put(input.getName(), value);
		}
		return result;
	}


	public void fillInputs(List<Object> row) {
		for (int i = 0; i < row.size(); i++) {
			inputs.get(i).setValue(row.get(i));
		}
	}

	public void clearInputs() {
		for (Input input : inputs) {
			input.setValue(null);
		}
	}
	
	public void enableAllInputs() {
		for (Input input : inputs) {
			input.setEnabled(true);
		}
	}
	
	public void disablePKeyInputs() {
		for (Input input : inputs) {
			if(input.isPrimary()) {
				input.setEnabled(false);
			}
		}
	}
	
	public boolean inputsValid() {
		for (Input input : inputs) {
			if(input.getValue() == null && !input.isNullable()) {
				return false;
			}
		}
		return true;
	}
	

	public String mandatoryButEmptyInputNames() {
		String string = "";
		
		for (Input input : inputs) {
			if(input.getValue() == null && !input.isNullable()) {
				string += input.getName() + ", ";
			}
		}
		
		String result = string.substring(0, string.length() - 2);
		return result;
	}
	
	@Override
	public void update(Publisher context) {
		tableModel = ((ApplicationModel) context).getMainTableModel();
		setInputs(tableModel.getColumns());
	}
	
	public List<Input> getInputs() {
		return inputs;
	}

    public static void showTimedAlert(Component parent, String message, int duration) {
        JOptionPane optionPane = new JOptionPane(message, JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = optionPane.createDialog(parent, "Alert");

        Timer timer = new Timer(duration, e -> {
            dialog.dispose();
        });
        timer.setRepeats(false); 
        timer.start();

        dialog.setVisible(true);
    }
    
	public void setState(EditorState editorState) {
		this.editorState = editorState;
	}
	
	public GeneralTableModel getTableModel() {
		return tableModel;
	}
	
}
