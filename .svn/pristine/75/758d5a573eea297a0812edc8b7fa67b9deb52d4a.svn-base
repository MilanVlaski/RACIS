package model.xmlparser;

import java.io.File;
import java.io.FileInputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import db.manipulation.DbManipulation;
import db.type.DatabaseType;
import model.tree.TreeElement;
import model.tree.TreeElement.Column;
import model.tree.TreeElement.Package;
import model.tree.TreeElement.Table;

public class XMLParser implements XMLTreeParser {

	private static final String fileLocation = "xmlsetup\\generisani.xml";

	Document document = null;
	XPathExpression expression = null;
	XPath xpath = null;
	
	
	public DbManipulation createConnection() {

		prepareParsing();
			
		Node connection = null;
		try {
			connection = (Node) xpath.compile("/*/connection").evaluate(document, XPathConstants.NODE);
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}
			
		String databaseType = connection.getAttributes().getNamedItem("database_type").getNodeValue();
		String address = connection.getAttributes().getNamedItem("address").getNodeValue();
		String port = connection.getAttributes().getNamedItem("port").getNodeValue();
		String dbName = connection.getAttributes().getNamedItem("database").getNodeValue();
		String user = connection.getAttributes().getNamedItem("username").getNodeValue();
		String password = connection.getAttributes().getNamedItem("password").getNodeValue();
		
		DatabaseType dbType = null;
		
		if(DatabaseType.MsSQL_JDBC.toString().equals(databaseType))
			dbType = DatabaseType.MsSQL_JDBC;
		
		return DbManipulation.createConnection(dbType,
				address, port, dbName, user, password);
	}
	
	@Override
	public Package initializeTree() {
		
		Package rootPackage = null;
		prepareParsing();
		
		try {
			expression = xpath.compile("/*");
			Node root = (Node) expression.evaluate(document, XPathConstants.NODE);
			
			rootPackage = new Package();
			rootPackage.name = root.getAttributes().getNamedItem("name").getNodeValue();
			
			expression = xpath.compile("/*/package");
			NodeList packages = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
			subPacks(packages, rootPackage);
			
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}

		return rootPackage;
	}
	/**
	 * Adds packages, subpackages, tables and CRUD operations to our TreeModel.
	 * @param packages
	 * @param rootPackage
	 * @throws XPathExpressionException
	 */
	public void subPacks(NodeList packages, TreeElement rootPackage) throws XPathExpressionException {	
		
		for(int i = 0; i < packages.getLength(); i++) {
			
			Package tempPackage = new Package();
			tempPackage.code = null;
			tempPackage.name = packages.item(i).getAttributes().getNamedItem("name").getNodeValue();
			rootPackage.addElement(tempPackage);
			
			expression = xpath.compile("package");
			NodeList subPackages = (NodeList) expression.evaluate(packages.item(i), XPathConstants.NODESET);
			
			subPacks(subPackages, tempPackage);
			
			expression = xpath.compile("table");
			NodeList tables = (NodeList) expression.evaluate(packages.item(i), XPathConstants.NODESET);
			
			tables(tempPackage, tables);
		}
	}

	public void tables(Package tempPackage, NodeList tables) throws XPathExpressionException {
		for (int j = 0; j < tables.getLength(); j++) {
			Table tempTable = new Table();
			
			tempTable.code = null;
			tempTable.name = tables.item(j).getAttributes().getNamedItem("name").getNodeValue();
			
			tempPackage.addElement(tempTable);

			expression = xpath.compile("column");
			NodeList columns = (NodeList) expression.evaluate(tables.item(j), XPathConstants.NODESET);
			
			for (int k = 0; k < columns.getLength(); k++) 
			{
				
				Column tempColumn = new Column();
				
				tempColumn.code = columns.item(k).getAttributes().getNamedItem("code").getNodeValue();
				tempColumn.name = columns.item(k).getAttributes().getNamedItem("name").getNodeValue();
				
				boolean pomBool = false;
				
				if (columns.item(k).getAttributes().getNamedItem("nullable").getNodeValue().equals("true"))
				{
					pomBool = true;
				}
				
				tempColumn.setNullable(pomBool);
				
				pomBool = false;
				
				if (columns.item(k).getAttributes().getNamedItem("primary").getNodeValue().equals("true"))
				{
					pomBool = true;
				}
				
				tempColumn.setPrimary(pomBool);
				
				tempTable.addElement(tempColumn);
			}
			
			//Kupljenje naziva crud operacija
			expression = xpath.compile("crud/create");
			Node create = (Node) expression.evaluate(tables.item(j), XPathConstants.NODE);
			
			tempTable.setCreateSProc(create.getTextContent());
			
			expression = xpath.compile("crud/retrieve");
			Node retrieve = (Node) expression.evaluate(tables.item(j), XPathConstants.NODE);
			
			tempTable.setRetrieveSProc(retrieve.getTextContent());
			
			expression = xpath.compile("crud/update");
			Node update = (Node) expression.evaluate(tables.item(j), XPathConstants.NODE);
			
			tempTable.setUpdateSProc(update.getTextContent());
			
			expression = xpath.compile("crud/delete");
			Node delete = (Node) expression.evaluate(tables.item(j), XPathConstants.NODE);
			
			tempTable.setDeleteSProc(delete.getTextContent());
		}
	}
	
	public void prepareParsing() {
		try {
			FileInputStream fileIS;
			fileIS = new FileInputStream(new File(fileLocation));
			DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
			builderFactory.setNamespaceAware(true);
			DocumentBuilder builder = builderFactory.newDocumentBuilder();
			document = builder.parse(fileIS);
			xpath = XPathFactory.newInstance().newXPath();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
