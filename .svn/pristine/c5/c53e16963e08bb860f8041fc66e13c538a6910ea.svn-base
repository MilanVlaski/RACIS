package view.input;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeListener;
import java.text.ParseException;

import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import model.tree.TreeElement.Column;
/**
 * Input polje koje sluzi za sve numericke i string vrijednosti.
 * @author Milan Vlaski
 *
 */
public class TextInput extends JPanel implements Input{

	private Column column;
	private JFormattedTextField formattedField;
	
	TextInput(String label, JFormattedTextField formattedField, Column column) {
		this.formattedField = formattedField;
		this.column = column;
		
		this.formattedField.setEnabled(!column.isPrimary());
		if(column.getSize() < 60) {
			this.formattedField.setPreferredSize(new Dimension(100, 20));
		} else {
			this.formattedField.setPreferredSize(new Dimension((int)(column.getSize() * 0.5) + 30, 20));
		}
		
		this.formattedField.getDocument().addDocumentListener(new ChangeListener());
		
		JLabel jLabel = new JLabel(label);
		jLabel.setLabelFor(this.formattedField);
		
		setBorder(new EmptyBorder(7, 7, 7, 7));	
		
		
		setLayout(new GridBagLayout());
		
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.anchor = GridBagConstraints.NORTHWEST;
		add(jLabel, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.fill = GridBagConstraints.HORIZONTAL;
		add(this.formattedField, constraints);
		
		setVisible(true);
	}
	
	
	@Override
	public Object getValue() {
		return formattedField.getValue();
	}

	@Override
	public void setValue(Object object) {
		formattedField.setValue(object);
	}
	@Override
	public void setReferenceBtn(Component btn) {
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridx = 1;
		constraints.gridy = 1;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.insets = new Insets(0, 4, 0, 0);
		add(btn, constraints);
	}
	
	@Override
	public void setEnabled(boolean enabled) {
		formattedField.setEnabled(enabled);
	}
	
	private class ChangeListener implements DocumentListener {
		
		@Override
		public void removeUpdate(DocumentEvent e) {
			checkIfValid();
		}
		
		@Override
		public void insertUpdate(DocumentEvent e) {
			checkIfValid();
		}
		
		@Override
		public void changedUpdate(DocumentEvent e) {
			checkIfValid();
		}
		
	}
	
	private void checkIfValid() {
		boolean isValid = formattedField.isEditValid();
		if (isValid) {
		    formattedField.setBorder(null);
		} else {
		    formattedField.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
	}


	@Override
	public boolean isPrimary() {
		return column.isPrimary();
	}
	
}
